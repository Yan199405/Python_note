一、数据类型和变量：
	类型：包括整形、字符串、浮点数
	用python表示科学计数法：
		1.23*10的9次方可以写为：1.23e9             //e代表10的次方，e后是几次方
		9的5次方9*9*9*9*9可以写为：9**5

	布尔值：True、False
		布尔值运行符号：and or not 
	空值：None    且None不等于0
		
	运算符：+ - *  % / //
		这里需要注意python3的除‘/’ 是精确的，//才是整除，称为地板除。
		>>> 10 / 3
		3.3333333333333335
		>>>10 // 3
		3
	练习1
	请打印出以下变量的值：

	n = 123
	f = 456.789
	s1 = 'Hello, world'
	s2 = 'Hello, \'Adam\''					// \代表将引号内的引号转义
	s3 = r'Hello, "Bart"'
	s4 = r'''Hello,							//Python还允许用r''表示''内部的字符串默认不转义
	Lisa!'''
	print(n,'\n',f,'\n',s1,'\n',s2,'\n',s3)
	就是用这个命令分行打印的时候为什么从第二行开始开头都多了一个空格
	解决方案：
	print(n,f,s1,s2,s3,s4,sep='\n')
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
二、字符串和编码：
	ascii为国际编码，1个字节为8个byte，不可表示中文，因为中文转化为二进制超过了255，固中国制定了GB2312B编码来把中文编进去。

	Unicode标准是可以将所有的语言统一到一套编码中防止乱码的，它是2个字节。

	UTF-8编码：可以节约Unicode空间
	
	在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言
	ord()和chr()
		ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
		>>> ord('A')
		65
		>>> ord('中')
		20013
		>>> chr(66)
		'B'
		>>> chr(25991)
		'文'

	encode()和decode() 可将str和byte转换

	以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
		>>> 'ABC'.encode('ascii')
		b'ABC'
		>>> '中文'.encode('utf-8')
		b'\xe4\xb8\xad\xe6\x96\x87'

	要把bytes变为str，就需要用decode()方法：
		>>> b'ABC'.decode('ascii')
		'ABC'
		>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
		'中文'

	要计算str包含多少个字符，可以用len()函数：
		>>> len('ABC')
		3
		>>> len('中文')
		2

	len()函数计算字节数：
		>>> len(b'ABC')
		3

	so...  通常使用以下开头定义python源代码字符编码
		#!/usr/bin/env python3
		# -*- coding: utf-8 -*-



	格式化：%
	在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
	常用的占位符：
		%d	整数
		%f	浮点数
		%s	字符串
		%x	十六进制整数
	例子：给数字前添加0
		>>> '%2d-%02d' % (3, 1)
		' 3-01'
	例子：小数点向后两位
		>>> '%.2f' % 3.1415926
		'3.14'
	如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
		>>> 'Age: %s. Gender: %s' % (25, True)
		'Age: 25. Gender: True'
	有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
	>>> 'growth rate: %d %%' % 7
	'growth rate: 7 %'
	
	练习：小明上次成绩为72，这次为85，计算他成绩的提升率，以xx.x%的形式输出
		#!/usr/bin/env python3
		# -*- coding: utf-8 -*-
		r=(85-72)/72*100
		print ('小明的成绩提升率为:%1.f%%' % r)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
三、list和tuple
	list格式：listname=['Tom',123,变量]              （元素可以使字符串、数字、变量）
	
	打印：
	>>> listname
	['Tom', 123, ['lala', 'jack', 'jaja']]
	第一个变量是从0开始的
	>>> listname[0]
	'Tom'
	打印倒数第一个
	>>> listname[-1]
	['lala', 'jack', 'jaja']
			
	list的操作命令：
		.append添加：
		listname.append('Admin')
		>>> listname
		['Tom', 123, ['lala', 'jack', 'jaja'], 'Admin']
		
		.insert:把元素插入到指定的位置，比如索引号为1的位置：
		>>> listname.insert(1,12345)
		>>> listname
		['Tom', 12345, 123, ['lala', 'jack', 'jaja'], 'Admin']
		
		.pop：删除list末尾的元素，用pop()
		>>> listname.pop()
		'Admin'
		>>> listname
		['Tom', 12345, 123, ['lala', 'jack', 'jaja']]'
		
	tuple元组,固定的列表，它的格式tuplename('Tom',123,变量)	
		不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
	    tuple的陷阱：要定义一个只有1个元素的tuple，如果你这么定义：
		>>> t = (1)
		>>> t
		1
		定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1
		所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：

		>>> t = (1,)
		>>> t
		(1,)
	
	练习:请用索引取出下面list的指定元素：

		# -*- coding: utf-8 -*-

		L = [
			['Apple', 'Google', 'Microsoft'],
			['Java', 'Python', 'Ruby', 'PHP'],
			['Adam', 'Bart', 'Lisa']
		]
		# 打印Apple:
		print(?)
		# 打印Python:
		print(?)
		# 打印Lisa:
		print(?)

		答：
		>>> L[0][0]
		'Apple'
		>>> L[1][1]
		'Apple'
		>>> L[2][2]
		'Lisa'
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
四、条件判断：
	格式1：if <判断>：
			 <执行ture>
		  else:
			 <执行False>
	例子：
	age = 3
	if age >= 18:
		print('your age is', age)
		print('adult')
	else:
		print('your age is', age)
		print('teenager')
	
	格式2：if <条件判断1>:
		<执行1>
	elif <条件判断2>:
		<执行2>
	elif <条件判断3>:
		<执行3>
	else:
		<执行4>
	例子：
	age = 3
	if age >= 18:
		print('adult')
	elif age >= 6:
		print('teenager')
	else:
		print('kid')
	
	读入输入： input
	例子：
	birth = input('birth: ')
	if birth < 2000:
		print('00前')
	else:
		print('00后')
	
	输入1982，结果报错：

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unorderable types: str() > int()
	这是因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：
	birth = int(input('birth: '))
	if birth < 2000:
		print('00前')
	else:
		print('00后')
		
	练习

	小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：

	低于18.5：过轻
	18.5-25：正常
	25-28：过重
	28-32：肥胖
	高于32：严重肥胖
	用if-elif判断并打印结果：

		# -*- coding: utf-8 -*-

		height = float(input("请输入你的身高："))
		weight = float(input("请输入你的体重："))	
				
		bmi = weight/height/height
		if bmi >= 32:
			print ('过度肥胖！！！')
		elif bmi>=28:
			print ('肥胖')
		elif bmi>=25:
			print ('稍胖')
		else :
			print ('过轻')
			
			
		自己写的：
		# -*- coding: utf-8 -*-
		#体重指数BMI=体重/身高的平方（国际单位kg/㎡
		tall=float(input('身高m： '))
		tiz=float(input('体重(kg)： '))
		bmi = tiz/tall**2
		if bmi<18.5:
			print ("过轻")
		elif bmi <=25:
			print ("正常")
		elif bmi <=28:
			print ("过重")
		elif bmi <=32:
			print ("肥胖")
		else:
			print ("严重肥胖")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
五、循环
	for循环格式：for i in list:
	do....
	
	range()函数，可以生成数字序列：rang（101）代表0、1、2、....100
	例子：计算100内整数的和
	sum=0
	for i in range(101):
		sum=sum+i
		print (sum)
	
	while循环格式：
	例子：计算100以内所有奇数之和
	sum = 0
	n = 99
	while n > 0:
		sum = sum + n
		n = n - 2
	print(sum)
	
	练习:请利用循环依次对list中的每个名字打印出Hello, xxx!：
# -*- coding: utf-8 -*-
L = ['Bart', 'Lisa', 'Adam']
for i in L:
	print ('Hello %s' %i)
	
	break语句:提前结束循环
n = 1
while n <= 100:
if n > 10: # 当n = 11时，条件满足，执行break语句
	break # break语句会结束当前循环
	print(n)
	n = n + 1
	print('END')
	
	continue语句，只跳出单次循环
	例子：只打印出奇数：
# -*- coding: utf-8 -*-
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
六、使用dict和set
	dict全称dictionary字典，格式dictname{}
		特点：使用键-值（key-value）存储，具有极快的查找速度。
		举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：
		names = ['Michael', 'Bob', 'Tracy']
		scores = [95, 75, 85]
	用dict存储：
		>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
		>>> d['Michael']
		95
	
	把数据放入dict的方法可以通过key放入：   注：由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉
		>>> d['Adam'] = 67
		>>> d['Adam']
		67
	如果key不存在，dict就会报错，
		一是通过in判断key是否存在：
		>>> 'Thomas' in d
		False
	
		二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
		>>> d.get('Thomas')
		>>> d.get('Thomas', -1)
		-1
	要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
		>>> d.pop('Bob')
		75
		>>> d
		{'Michael': 95, 'Tracy': 85}
	
	注意，dict内部存放的顺序和key放入的顺序是没有关系的。
	
	和list比较，dict有以下几个特点：
		查找和插入的速度极快，不会随着key的增加而变慢；
		需要占用大量的内存，内存浪费多。
		dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
		
		
	set：set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key	
	要创建一个set，需要提供一个list作为输入集合：
		>>> s=set([1,2,3])
		>>> s
		{1, 2, 3}
	注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。
		
	重复元素在set中自动被过滤：
		>>> s = set([1, 1, 2, 2, 3, 3])
		>>> s
		{1, 2, 3}	
	.add(key)来添加
		通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
		>>> s.add(4)
		>>> s
		{1, 2, 3, 4}
		>>> s.add(4)
		>>> s
		{1, 2, 3, 4}
	remove(key)方法可以删除元素	
		>>> s.remove(4)
		>>> s
		{1, 2, 3}
	set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
		>>> s1 = set([1, 2, 3])
		>>> s2 = set([2, 3, 4])
		>>> s1 & s2
		{2, 3}
		>>> s1 | s2
		{1, 2, 3, 4}	
		
	练习：使用dict查找s（分数表）中对应同学的成绩
		s = {'iven':100,'kven':97,'linus':89,'lary':79,'harri':90}
		for d in s:
			print(d)
		print('输入你的需要查找的姓名:')
		name = input()
		ssd =s.get(name,False)
		if ssd == False:
			print('搜索结果:您输入的名字不存在!\n')
		else:
			x = int(s[name])
			print(name,'同学你好,你的分数是:',x,)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
七、函数
	格式为def my_class( ):
		例子：我们自己定义一个求绝对值的函数
		def my_abs(x):
			if x>=0:
				return x
			elif:
				return -x
		注意：一旦执行到return时，函数就执行完毕，如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。		
		
	空函数:定义什么都不做的函数可以用pass语句：	
		例子：代码中暂时没想好写什么可以用它来做占位符，保证运行。
			def nop():
		pass
		
	返回多个值的函数：
		例子：比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：
		import math         //导入math包，它中含有下面用到的cos、sin函数
		def move(x, y, step, angle=0):
			nx = x + step * math.cos(angle)
			ny = y - step * math.sin(angle)
			return nx, ny
		实际上返回的元组tuple也算是一个值了
		>>> r = move(100, 100, 60, math.pi / 6)
		>>> print(r)
		(151.96152422706632, 70.0)
	
	练习:此题有两种方法
	方法一：
		# -*- coding: utf-8 -*-
		#请定义一个函数quadratic(a, b, c)，接收3个参数，返回一元二次方程：
		#解一元二次方程：ax2 + bx + c = 0
		#math.sqrt() 是计算平方根的
		import math
		def Error1():
			print("错误1：二次项系数不能为0，请重新输入：")

		def Error2():
			print("错误2：代尔塔不能小于0，请重新输入：")

		def Quadrartic(a,b,c):
			if a1!=0 and (b1*b1-4*a1*c1)>=0:
				x1=(-b+math.sqrt(b1*b1-4*a1*c1))/(2*a)
				x2=(-b-math.sqrt(b1*b1-4*a1*c1))/(2*a)
				return(x1,x2)
			else:
				if a1==0:
					Error1()
				if (b1*b1-4*a1*c1)<0:
					Error2()
		while True:
			a1=float(input("请输入二次项系数：(不能等于0)"))
			b1=float(input("请输入一次项系数："))
			c1=float(input("请输入常数项："))
			
			print (Quadrartic(a1,b1,c1))
			print ("Done")
			print ("")	
		
	方法二：
		import math
		def Quadrartic(a,b,c):
				x1=(-b+math.sqrt(b1*b1-4*a1*c1))/(2*a)
				x2=(-b-math.sqrt(b1*b1-4*a1*c1))/(2*a)
				return(x1,x2)
		def Error1():
			print("错误1：二次项系数不能为0，请重新输入：")
			print("")
		def Error2():
			print("错误2：代尔塔不能小于0，请重新输入：")
			print("")

		while True:
			a1=float(input("请输入二次项系数：(不能等于0)"))
			b1=float(input("请输入一次项系数："))
			c1=float(input("请输入常数项："))		
			if a1!=0 and (b1*b1-4*a1*c1)>=0:
				print (Quadrartic(a1,b1,c1))
				print ("Done")
				print ("")	
			else:
				if a1==0:
					Error1()
				if (b1*b1-4*a1*c1)<0:
					Error2()		

		网页答案：
			x1=(-b+math.sqrt(b*b-4*a*c))/(2*a)
			x2=(-b-math.sqrt(b*b-4*a*c))/(2*a)
			return(x1,x2)

		def Error1():
			print("错误1：二次项系数不能为0，请重新输入...")
		def Error2():
			print("错误2：代尔塔不能小于0，请重新输入...")

			while True:
		#	a1=float(input("请输入二次项系数：(不能等于0)"))
		#	b1=float(input("请输入一次项系数："))
		#	c1=float(input("请输入常数项："))
				if a!=0 and (b*b-4*a*c)>=0: 
					print(quagratic(a,b,c))
					print ("Done")
					print ("")
				else:
					if a==0:
						Error1()
					if (b*b-4*a*c)<0:
						Error2()
							
	调用函数：
	练习：hex()是python的内置函数，可把一个整数转换成一个十六进制数
		n1=int(input("请输入第一个整数："))
		n2=int(input("请输入第二个整数："))
		nn=(n1,n2)
		for i in nn:
			print ('i的十六进制表示为：%s'%(hex(i)))
	
	函数的参数：
	自定义参数：下例定义了两个参数，使用时缺一不可
	例子1：定义power(x, n)函数，可以计算x的n次方
		def power(x,n):
			s=1
			while n>0:
				n=n-1
				s=s*x
			return s
	
	默认参数：如下设置参数的默认值，当x输入5的时候默认计算它的平方
		def power(x, n=2):
			s = 1
			while n > 0:
				n = n - 1
				s = s * x
			return s
	
	设置默认参数时，有几点要注意：
		一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；
		二规则：当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
			按顺序调用：如果我们定义一个函数有3个参数function (can1, can2=x,can3=y) 这时can2和can3我们作为默认参数，当我们调用时function(a,b)   它会按顺序自动先将b作为can2的值，can3用默认值y
			不按顺序调用：当不按顺序提供部分默认参数时，需要把参数名写上function('a',can3='c'),这样的话实际作用的参数为function('a','x','c'),can2用默认值x；
		三隐患：默认参数不要用变量，可以用None来代替：
		例子：
		def add_end(L=[]):
			L.append('END')
			return L
		这个存在问题，就是当你重复使用add_end()时它会改变默认参数的值，['END'，'END']
			改善：使用none
		def add_end(L=None):
			if L is None:
				L = []
			L.append('END')
			return L
	0
	递归函数：
		在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
		举个例子，我们来计算阶乘n! = 1 x 2 x 3 x ... x n，用函数fact(n)表示，可以看出
			def fact(n):
			if n==1:
				return 1
			return n * fact(n - 1)
		注意：使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。
		解决递归调用栈溢出的方法是通过尾递归优化:尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况
		上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：
			def fact(n):
				return fact_iter(n, 1)

			def fact_iter(num, product):
				if num == 1:
					return product
				return fact_iter(num - 1, num * product)
		可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，num - 1和num * product在函数调用前就会被计算，不影响函数调用。
			fact(5)对应的fact_iter(5, 1)的调用如下：

			===> fact_iter(5, 1)
			===> fact_iter(4, 5)
			===> fact_iter(3, 20)
			===> fact_iter(2, 60)
			===> fact_iter(1, 120)
			===> 120		
			尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。	
			
		练习
		汉诺塔的移动可以用递归函数非常简单地实现。
		请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：

		def move(n,a,b,c):
			if n==1:
				print(a,'-->',c)
			else:
				move(n-1,a,c,b)#把a上的n-1块移动到b
				move(1,a,b,c)#把a上的最后一块移动到c
				move(n-1,b,a,c)#把b上的n-1块移动到c
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
八、高级特性
	
	切片：是指取list中的一段
		例子：取L中的前三个元素
		>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
		非切片方式：
			>>> [L[0], L[1], L[2]]
			['Michael', 'Sarah', 'Tracy']
		使用切片：L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
			>>> L[0:3]
			['Michael', 'Sarah', 'Tracy']
		如果第一个索引是0，还可以省略：
			>>> L[:3]
			['Michael', 'Sarah', 'Tracy']
		类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
			>>> L[-2:]
			['Bob', 'Jack']
			>>> L[-2:-1]
			['Bob']
		还可以跳跃式取元素：
			例子：前10个数，每两个取一个：
			>>> L[:10:2]
			[0, 2, 4, 6, 8]
			
			所有数，每5个取一个：
			>>> L[::5]
			[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
			
			甚至什么都不写，只写[:]就可以原样复制一个list：
			>>> L[:]
			[0, 1, 2, 3, ..., 99]
	
		tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
			>>> (0, 1, 2, 3, 4, 5)[:3]
			(0, 1, 2)
		
			字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：
			>>> 'ABCDEFG'[:3]
			'ABC'
			>>> 'ABCDEFG'[::2]
			'ACEG'
		
		练习：利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：
			# -*- coding: utf-8 -*-
			L = []             
			def trim(s):		
			while len(s) > 0:
				if s[0] == ' ':
					s = s[1:]
				elif s[-1] == ' ':
					s = s[:-1]
				else:
					break
			return s
				
	迭代：
		for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）
		在Python中，迭代是通过for ... in来完成的：
			例：迭代输出字典
			>>> d = {'a': 1, 'b': 2, 'c': 3}
			>>> for key in d:
			...     print(key)
			...
			a
			c
			b
			
			例：字符串迭代
			>>> for ch in 'ABC':
			...     print(ch)
			...
			A
			B
			C
		判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：
			>>> from collections import Iterable
			>>> isinstance('abc', Iterable) # str是否可迭代
			True
			>>> isinstance([1,2,3], Iterable) # list是否可迭代
			True
			>>> isinstance(123, Iterable) # 整数是否可迭代
			False
		
		上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：
			>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
			...     print(x, y)
			...
			1 1
			2 4
			3 9
			
		练习：请使用迭代查找一个list中最大最小值，并返回一个tuple
		# -*- coding: utf-8 -*-
		def findMinAndMax(L):
			max=min=None
			if L:
				for x in L:
					if max is None or max > x:
						max=x
					if min is None or min < x:
						min=x
			return (max,min)
		
		第二种方法，使用sort排序更简单
		    max = min = None
			if L:
				L.sort()
				min = L[0]
				max = L[-1]
			return (min, max)

	列表生成式：
		举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：
			>>> list(range(1, 11))
			[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		生成[1x1, 2x2, 3x3, ..., 10x10]：
			>>> [x * x for x in range(1, 11)]
			[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
		for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：
			>>> [x * x for x in range(1, 11) if x % 2 == 0]
			[4, 16, 36, 64, 100]
		还可以使用两层循环，可以生成全排列：
			>>> [m + n for m in 'ABC' for n in 'XYZ']
			['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
	for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：
			>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
			>>> for k, v in d.items():
			...     print(k, '=', v)
			...
			y = B
			x = A
			z = C
	因此，列表生成式也可以使用两个变量来生成list：
			>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
			>>> [k + '=' + v for k, v in d.items()]
			['y=B', 'x=A', 'z=C']
	最后把一个list中所有的字符串变成小写：
			>>> L = ['Hello', 'World', 'IBM', 'Apple']
			>>> [s.lower() for s in L]
			['hello', 'world', 'ibm', 'apple']
	
	
	
		练习：如果list中既包含字符串，又包含整数，由于非字符串类型没有lower()方法，所以列表生成式会报错：
		使用内建的isinstance函数可以判断一个变量是不是字符串：
			>>> x = 'abc'
			>>> y = 123
			>>> isinstance(x, str)
			True
			>>> isinstance(y, str)
			False
			
			# -*- coding: utf-8 -*-
			L1 = ['Hello', 'World', 18, 'Apple', None]
			L2 = [x.lower() for x in L1 if isinstance(x, (str))]
			print(L2)
	
	生成器：
		通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
		所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。
		要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
			>>> L = [x * x for x in range(10)]
			>>> L
			[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
			>>> g = (x * x for x in range(10))
			>>> g
			<generator object <genexpr> at 0x1022ef630>
			创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。
	
		可以通过next()函数获得generator的下一个返回值：

			>>> next(g)
			0
			>>> next(g)
			1
			>>> next(g)
			4
			>>> next(g)
			9
			>>> next(g)
			16
			>>> next(g)
			25
			>>> next(g)
			36
			>>> next(g)
			49
			>>> next(g)
			64
			>>> next(g)
			81
			>>> next(g)
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			StopIteration
			
		当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：所以，我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它

			>>> g = (x * x for x in range(10))
			>>> for n in g:
			...     print(n)
			... 
			0
			1
			4
			9
			16
			25
			36
			49
			64
			81
	
		比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：

			1, 1, 2, 3, 5, 8, 13, 21, 34, ...

			斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：

			def fib(max):
				n, a, b = 0, 0, 1
				while n < max:
					print(b)
					a, b = b, a + b
					n = n + 1
				return 'done'
	
			上面的函数可以输出斐波那契数列的前N个数：

			>>> fib(6)
			1
			1
			2
			3
			5
			8
			'done'
			仔细观察，可以看出，fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。
			也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了：

			def fib(max):
				n, a, b = 0, 0, 1
				while n < max:
					yield b
					a, b = b, a + b
					n = n + 1
				return 'done'
			这就是定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：

			>>> f = fib(6)
			>>> f
			<generator object fib at 0x104feaaa0>
			这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

			举个简单的例子，定义一个generator，依次返回数字1，3，5：

			def odd():
				print('step 1')
				yield 1
				print('step 2')
				yield(3)
				print('step 3')
				yield(5)
			调用该generator时，首先要生成一个generator对象，然后用next()函数不断获得下一个返回值：

			>>> o = odd()
			>>> next(o)
			step 1
			1
			>>> next(o)
			step 2
			3
			>>> next(o)
			step 3
			5
			>>> next(o)
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			StopIteration
			可以看到，odd不是普通函数，而是generator，在执行过程中，遇到yield就中断，下次又继续执行。执行3次yield后，已经没有yield可以执行了，所以，第4次调用next(o)就报错。

			回到fib的例子，我们在循环过程中不断调用yield，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。

			同样的，把函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：

			>>> for n in fib(6):
			...     print(n)
			...
			1
			1
			2
			3
			5
			8
			但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：

			>>> g = fib(6)
			>>> while True:
			...     try:
			...         x = next(g)
			...         print('g:', x)
			...     except StopIteration as e:
			...         print('Generator return value:', e.value)
			...         break
			...
			g: 1
			g: 1
			g: 2
			g: 3
			g: 5
			g: 8
			Generator return value: done
		
		练习：杨辉三角定义如下：

					  1
					1   1
				  1   2   1
				1   3   3   1
			  1   4   6   4   1
			1   5   10  10  5   1
			把每一行看做一个list，试写一个generator，不断输出下一行的list：

			# -*- coding: utf-8 -*-

			def triangles():
			
			# 期待输出:
			# [1]
			# [1, 1]
			# [1, 2, 1]
			# [1, 3, 3, 1]
			# [1, 4, 6, 4, 1]
			# [1, 5, 10, 10, 5, 1]
			# [1, 6, 15, 20, 15, 6, 1]
			# [1, 7, 21, 35, 35, 21, 7, 1]
			# [1, 8, 28, 56, 70, 56, 28, 8, 1]
			# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
			n = 0
			for t in triangles():
				print(t)
				n = n + 1
				if n == 10:
					break
	
		答案：http://ponyjia.blog.51cto.com/917324/1764218
		def triangles():
			L = [1]
			while True:
				yield L
				L = [1] + [L[i - 1] + num for i, num in enumerate(L) if i] + [1]
			return L
	
	小结：

		凡是可作用于for循环的对象都是Iterable类型；

		凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；

		集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
	
		Python的for循环本质上就是通过不断调用next()函数实现的，例如：

			for x in [1, 2, 3, 4, 5]:
				pass
			实际上完全等价于：

			# 首先获得Iterator对象:
			it = iter([1, 2, 3, 4, 5])
			# 循环:
			while True:
				try:
					# 获得下一个值:
					x = next(it)
				except StopIteration:
					# 遇到StopIteration就退出循环
					break
	
九、函数编程
	map/reduce:Python内建了map()和reduce()函数
		map()函数接受两个参数，一个是函数，一个是Iterable，map将传入的参数一次作用到序列的每个元素，并把结果作为新的Iterator返回
			举例说明，比如我们有一个函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上，就可以用map()实现如下
			
			>>> def f(x):
			...     return x * x
			...
			>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
			>>> list(r)
			[1, 4, 9, 16, 25, 36, 49, 64, 81]
			
				map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。

		map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：
			>>> list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
			['1', '2', '3', '4', '5', '6', '7', '8', '9']
			
	reduce()。reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，
		其效果就是：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
		比方说对一个序列求和，就可以用reduce实现：
		
			>>> from functools import reduce
			>>> def add(x, y):
			...     return x + y
			...
			>>> reduce(add, [1, 3, 5, 7, 9])
			25
			
			当然求和运算可以直接用Python内建函数sum()，没必要动用reduce
			
		但是如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：

			>>> from functools import reduce
			>>> def fn(x, y):
			...     return x * 10 + y
			...
			>>> reduce(fn, [1, 3, 5, 7, 9])
			13579	
		
		这个例子本身没多大用处，但是，如果考虑到字符串str也是一个序列，对上面的例子稍加改动，配合map()，我们就可以写出把str转换为int的函数：

			>>> from functools import reduce
			>>> def fn(x, y):
			...     return x * 10 + y
			...
			>>> def char2num(s):
			...     return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
			...
			>>> reduce(fn, map(char2num, '13579'))
			13579
			
			将以上整理成一个str2int的函数就是：

				from functools import reduce

				def str2int(s):
					def fn(x, y):
						return x * 10 + y
					def char2num(s):
						return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
					return reduce(fn, map(char2num, s))
			
			还可以用lambda函数进一步简化成：

				from functools import reduce

				def char2num(s):
					return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]

				def str2int(s):
					return reduce(lambda x, y: x * 10 + y, map(char2num, s))
				也就是说，假设Python没有提供int()函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！

				lambda函数的用法在后面介绍。
			
				
	练习1：利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']：		
		# -*- coding: utf-8 -*-
		def normalize(name):
			pass
				
		# 测试:
		L1 = ['adam', 'LISA', 'barT']
		L2 = list(map(normalize, L1))
		print(L2)		
		
				#答： 这里用到了capitalize()函数，该方法返回一个首字母大写的字符串
				# -*- coding: utf-8 -*-
				def normalize(name):
					return name.capitalize()
				L1 = ['adam', 'LISA', 'barT']
				L2 = list(map(normalize, L1))
				print(L2)
	            
				另一种方法：
				# -*- coding: utf-8 -*-	
				def normalize(name):
					return name[0].upper() + name[1:].lower()
				
	练习2：Python提供的sum()函数可以接受一个list并求和，请编写一个prod()函数，可以接受一个list并利用reduce()求积：
		# -*- coding: utf-8 -*-
		from functools import reduce
		def prod(L):
			pass

		#测试：
		print('3 * 5 * 7 * 9 =', prod([3, 5, 7, 9]))
		if prod([3, 5, 7, 9]) == 945:
			print('测试成功!')
		else:
			print('测试失败!')
			
				#答： 
				# -*- coding: utf-8 -*-
				from functools import reduce
				def qiuji(x,y):
					return x * y 
				def prod(L):
					return reduce(qiuji,L)
				
				也可以用一步来表示：
				def prod(L):
				return reduce(lambda x, y: x*y, L)

	练习3：利用map和reduce编写一个str2float函数，把字符串'123.456'转换成浮点数123.456：
		# -*- coding: utf-8 -*-
		from functools import reduce

		def str2float(s):
			pass
		
		#测试：		
		print('str2float(\'123.456\') =', str2float('123.456'))
		if abs(str2float('123.456') - 123.456) < 0.00001:
			print('测试成功!')
		else:
			print('测试失败!')

			#答：
			DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
			a=''
			n=0
			for i in range(len(s)):
				if s[i]=='.':
					n=len(s)-1-i
				else:
						a=a+s[i]

			def char2num(s):
				return DIGITS[s]

		   
			result = reduce(lambda x, y: x * 10 + y, map(char2num, a))
			return result/(10**n)
	
	filter
	
		Python内建的filter()函数用于过滤序列。
		和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。

		例如，在一个list中，删掉偶数，只保留奇数，可以这么写：

		def is_odd(n):
			return n % 2 == 1

		list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
		# 结果: [1, 5, 9, 15]
		
		
		把一个序列中的空字符串删掉，可以这么写：

		def not_empty(s):
			return s and s.strip()

		list(filter(not_empty, ['A', '', 'B', None, 'C', '  ']))
		# 结果: ['A', 'B', 'C']
		可见用filter()这个高阶函数，关键在于正确实现一个“筛选”函数。
		注意到filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list。

		
		用filter求素数
		
		计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：
		
		首先，列出从2开始的所有自然数，构造一个序列：
		2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

		取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：
		3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

		取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：
		5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

		取新序列的第一个数5，然后用5把序列的5的倍数筛掉：
		7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

		不断筛下去，就可以得到所有的素数。

		用Python来实现这个算法，可以先构造一个从3开始的奇数序列：

		def _odd_iter():
			n = 1
			while True:
				n = n + 2
				yield n
		注意这是一个生成器，并且是一个无限序列。

		然后定义一个筛选函数：
		
		def _not_divisible(n):
			return lambda x: x % n > 0
		
		最后，定义一个生成器，不断返回下一个素数：

		def primes():
			yield 2
			it = _odd_iter() # 初始序列
			while True:
				n = next(it) # 返回序列的第一个数
				yield n
				it = filter(_not_divisible(n), it) # 构造新序列
		这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。

		由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：

		# 打印1000以内的素数:
		for n in primes():
			if n < 1000:
				print(n)
			else:
				break
		注意到Iterator是惰性计算的序列，所以我们可以用Python表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。
		
		练习
		回数是指从左向右读和从右向左读都是一样的数，例如12321，909。请利用filter()筛选出回数：
		# -*- coding: utf-8 -*-
		def is_palindrome(n):
		pass
		# 测试:
		output = filter(is_palindrome, range(1, 1000))
		print('1~1000:', list(output))
		if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
			print('测试成功!')
		else:
			print('测试失败!')
		
		答:
		#
		def num():
			n = 0
			while True:
				n = n + 1
				yield n

		def is_palindrome(n):
			nn=next(num)
			s=str(nn)
			x=len(nn)
			if x==1:
				True
			elif  s[0]==s[-1]:
				True

			return list(filer(is_palindrome())
		
		答案1：大神的答案（不懂），他把数字反过来的return
		def is_palindrome(n):
		n1 = n
		n2 = 0
		while n1 > 0:
			n2 = n2 * 10
			n2 = n2 + n1 % 10
			n1 = n1 // 10
		return n == n2
		
		答案2：
		from functools import reduce

		def is_palindrome(m):
			str_m=str(m)     
			len_m=len(str_m)   
			p=[]
			s={'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}
			for n in range(len_m):            
				p.append(str_m[-(n+1)])        
			def str2num(k):
				return s[k]
			def prob(x,y):
				return x*10+y
			p=reduce(prob,map(str2num,p))
			if m==p:
				return m
		答案3：
		def is_palindrome(n):
		number = str(n)
		l = len(number)
		t = int(l/2)
		for i in range(t):
			if number[i] != number[l-i-1]:
			   return False
		return True
		
		
		
	排序算法
	
		排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。

		Python内置的sorted()函数就可以对list进行排序：
		
		>>> sorted([36, 5, -12, 9, -21])
		[-21, -12, 5, 9, 36]
		
		此外，sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：
		>>> sorted([36, 5, -12, 9, -21], key=abs)
		[5, 9, -12, -21, 36]
		
		key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：
		list = [36, 5, -12, 9, -21]
		keys = [36, 5,  12, 9,  21]

		然后sorted()函数按照keys进行排序，并按照对应关系返回list相应的元素：

		keys排序结果 => [5, 9,  12,  21, 36]
						|  |    |    |   |
		最终结果     => [5, 9, -12, -21, 36]
		
		
		我们再看一个字符串排序的例子：
		>>> sorted(['bob', 'about', 'Zoo', 'Credit'])
		['Credit', 'Zoo', 'about', 'bob']

		默认情况下，对字符串排序，是按照ASCII的大小比较的，由于'Z' < 'a'，结果，大写字母Z会排在小写字母a的前面。
		现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个key函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。
		这样，我们给sorted传入key函数，即可实现忽略大小写的排序：
		>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)
		['about', 'bob', 'Credit', 'Zoo']

		要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：
		>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)
		['Zoo', 'Credit', 'bob', 'about']


		从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。

		小结
		sorted()也是一个高阶函数。用sorted()排序的关键在于实现一个映射函数。
		
		
		练习
		
		假设我们用一组tuple表示学生名字和成绩：
		L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]

		
		1、请用sorted()对上述列表分别按名字排序：
		2、再按成绩从高到低排序：
		
		# -*- coding: utf-8 -*-
		L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
		
		答案：
		1、按名字
		def by_name(t):
			return t[0].lower()
		L2 = sorted(L, key=by_name)
		print(L2)
		
		2、再按成绩从高到低排序：
		def by_score(t):
			return -t[1]
		L2 = sorted(L, key=by_score)
		print(L2)
		
		
		
	返回函数——函数作为返回值
	
		高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。
		我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：
		
		def calc_sum(*args):
			ax = 0
			for n in args:
				ax = ax + n
			return ax		
		
		但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
		def lazy_sum(*args):
			def sum():
				ax = 0
				for n in args:
					ax = ax + n
				return ax
			return sum		
		
		当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：
		>>> f = lazy_sum(1, 3, 5, 7, 9)
		>>> f
		<function lazy_sum.<locals>.sum at 0x101c6ed90>
		
		调用函数f时，才真正计算求和的结果：
		>>> f()
		25
		
		在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
		请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：
		>>> f1 = lazy_sum(1, 3, 5, 7, 9)
		>>> f2 = lazy_sum(1, 3, 5, 7, 9)
		>>> f1==f2
		False
		f1()和f2()的调用结果互不影响。
		
		
		闭包
		
		注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。
		另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。我们来看一个例子：

		def count():
			fs = []
			for i in range(1, 4):
				def f():
					 return i*i
				fs.append(f)
			return fs

		f1, f2, f3 = count()
		在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。

		你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：

		>>> f1()
		9
		>>> f2()
		9
		>>> f3()
		9
		
		全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。

		返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
		如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：

		def count():
			def f(j):
				def g():
					return j*j
				return g
			fs = []
			for i in range(1, 4):
				fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
			return fs
			
		再看看结果：

		>>> f1, f2, f3 = count()
		>>> f1()
		1
		>>> f2()
		4
		>>> f3()
		9
		缺点是代码较长，可利用lambda函数缩短代码。
		
		练习
		
		利用闭包返回一个计数器函数，每次调用它返回递增整数：
		
		# -*- coding: utf-8 -*-
		...
		# 测试:
		counterA = createCounter()
		print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5
		counterB = createCounter()
		if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:
			print('测试通过!')
		else:
			print('测试失败!')
		
		答案：
		def createCounter():
			f = [0]
			def counter():
				f[0] = f[0] + 1
				return f[0]
			return counter
			
		
	匿名函数：
		
		当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。

		在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算f(x)=x2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：

		>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
		[1, 4, 9, 16, 25, 36, 49, 64, 81]
		通过对比可以看出，匿名函数lambda x: x * x实际上就是：

		def f(x):
			return x * x
		关键字lambda表示匿名函数，冒号前面的x表示函数参数。

		匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。

		用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：

		>>> f = lambda x: x * x
		>>> f
		<function <lambda> at 0x101c6ef28>
		>>> f(5)
		25
		同样，也可以把匿名函数作为返回值返回，比如：

		def build(x, y):
			return lambda: x * x + y * y
			
		练习
		请用匿名函数改造下面的代码：
		def is_odd(n):
			return n % 2 == 1

		L = list(filter(is_odd, range(1, 20)))
		
		答案：
		is_odd=lambda n: n % 2 == 1
		L = list(filter(is_odd, range(1, 20)))

		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	